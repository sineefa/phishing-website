{"ast":null,"code":"const express = require('express');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst {\n  exec\n} = require('child_process');\nconst path = require('path');\nconst app = express();\nconst port = 5000;\napp.use(cors());\napp.use(bodyParser.json());\napp.post('/classify', (req, res) => {\n  const {\n    url\n  } = req.body;\n\n  // Define the path to the Python script\n  const pythonScript = path.join(__dirname, 'URLTran.py'); // Ensure path is correct\n\n  // Use double quotes around the URL argument to handle any special characters\n  const command = `python \"${pythonScript}\" \"${url}\"`;\n  console.log(`Executing command: ${command}`); // Log the command for debugging\n\n  // Execute Python script\n  exec(command, (error, stdout, stderr) => {\n    if (error) {\n      console.error(`Execution error: ${error.message}`);\n      return res.status(500).json({\n        result: 'Error in classification',\n        error: error.message\n      });\n    }\n    if (stderr) {\n      console.warn(`Python stderr: ${stderr}`); // Log stderr but continue processing\n    }\n\n    // Log the stdout from the Python script\n    console.log(`Python script output: ${stdout}`); // Print the output from the Python script\n\n    const pythonResult = stdout.trim(); // Get the output of the Python script\n    console.log(`Trimmed Python output: ${pythonResult}`); // Log the trimmed output for debugging\n\n    // Interpret Python output\n    if (pythonResult === '1') {\n      res.json({\n        result: 'Phishing'\n      });\n    } else if (pythonResult === '0') {\n      res.json({\n        result: 'Benign'\n      });\n    } else {\n      res.status(500).json({\n        result: 'Error in classification'\n      });\n    }\n  });\n});\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});","map":{"version":3,"names":["express","require","cors","bodyParser","exec","path","app","port","use","json","post","req","res","url","body","pythonScript","join","__dirname","command","console","log","error","stdout","stderr","message","status","result","warn","pythonResult","trim","listen"],"sources":["C:/Users/sinee/OneDrive/Desktop/New folder/frontend/src/App.js"],"sourcesContent":["const express = require('express');\nconst cors = require('cors');\nconst bodyParser = require('body-parser');\nconst { exec } = require('child_process');\nconst path = require('path');\n\nconst app = express();\nconst port = 5000;\n\napp.use(cors());\napp.use(bodyParser.json());\n\napp.post('/classify', (req, res) => {\n  const { url } = req.body;\n\n  // Define the path to the Python script\n  const pythonScript = path.join(__dirname, 'URLTran.py'); // Ensure path is correct\n  \n  // Use double quotes around the URL argument to handle any special characters\n  const command = `python \"${pythonScript}\" \"${url}\"`;\n\n  console.log(`Executing command: ${command}`); // Log the command for debugging\n\n  // Execute Python script\n  exec(command, (error, stdout, stderr) => {\n    if (error) {\n      console.error(`Execution error: ${error.message}`);\n      return res.status(500).json({ result: 'Error in classification', error: error.message });\n    }\n    \n    if (stderr) {\n      console.warn(`Python stderr: ${stderr}`); // Log stderr but continue processing\n    }\n\n    // Log the stdout from the Python script\n    console.log(`Python script output: ${stdout}`); // Print the output from the Python script\n\n    const pythonResult = stdout.trim(); // Get the output of the Python script\n    console.log(`Trimmed Python output: ${pythonResult}`); // Log the trimmed output for debugging\n\n    // Interpret Python output\n    if (pythonResult === '1') {\n      res.json({ result: 'Phishing' });\n    } else if (pythonResult === '0') {\n      res.json({ result: 'Benign' });\n    } else {\n      res.status(500).json({ result: 'Error in classification' });\n    }\n  });\n});\n\napp.listen(port, () => {\n  console.log(`Server running on http://localhost:${port}`);\n});\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAM,CAAC;AAC5B,MAAME,UAAU,GAAGF,OAAO,CAAC,aAAa,CAAC;AACzC,MAAM;EAAEG;AAAK,CAAC,GAAGH,OAAO,CAAC,eAAe,CAAC;AACzC,MAAMI,IAAI,GAAGJ,OAAO,CAAC,MAAM,CAAC;AAE5B,MAAMK,GAAG,GAAGN,OAAO,CAAC,CAAC;AACrB,MAAMO,IAAI,GAAG,IAAI;AAEjBD,GAAG,CAACE,GAAG,CAACN,IAAI,CAAC,CAAC,CAAC;AACfI,GAAG,CAACE,GAAG,CAACL,UAAU,CAACM,IAAI,CAAC,CAAC,CAAC;AAE1BH,GAAG,CAACI,IAAI,CAAC,WAAW,EAAE,CAACC,GAAG,EAAEC,GAAG,KAAK;EAClC,MAAM;IAAEC;EAAI,CAAC,GAAGF,GAAG,CAACG,IAAI;;EAExB;EACA,MAAMC,YAAY,GAAGV,IAAI,CAACW,IAAI,CAACC,SAAS,EAAE,YAAY,CAAC,CAAC,CAAC;;EAEzD;EACA,MAAMC,OAAO,GAAG,WAAWH,YAAY,MAAMF,GAAG,GAAG;EAEnDM,OAAO,CAACC,GAAG,CAAC,sBAAsBF,OAAO,EAAE,CAAC,CAAC,CAAC;;EAE9C;EACAd,IAAI,CAACc,OAAO,EAAE,CAACG,KAAK,EAAEC,MAAM,EAAEC,MAAM,KAAK;IACvC,IAAIF,KAAK,EAAE;MACTF,OAAO,CAACE,KAAK,CAAC,oBAAoBA,KAAK,CAACG,OAAO,EAAE,CAAC;MAClD,OAAOZ,GAAG,CAACa,MAAM,CAAC,GAAG,CAAC,CAAChB,IAAI,CAAC;QAAEiB,MAAM,EAAE,yBAAyB;QAAEL,KAAK,EAAEA,KAAK,CAACG;MAAQ,CAAC,CAAC;IAC1F;IAEA,IAAID,MAAM,EAAE;MACVJ,OAAO,CAACQ,IAAI,CAAC,kBAAkBJ,MAAM,EAAE,CAAC,CAAC,CAAC;IAC5C;;IAEA;IACAJ,OAAO,CAACC,GAAG,CAAC,yBAAyBE,MAAM,EAAE,CAAC,CAAC,CAAC;;IAEhD,MAAMM,YAAY,GAAGN,MAAM,CAACO,IAAI,CAAC,CAAC,CAAC,CAAC;IACpCV,OAAO,CAACC,GAAG,CAAC,0BAA0BQ,YAAY,EAAE,CAAC,CAAC,CAAC;;IAEvD;IACA,IAAIA,YAAY,KAAK,GAAG,EAAE;MACxBhB,GAAG,CAACH,IAAI,CAAC;QAAEiB,MAAM,EAAE;MAAW,CAAC,CAAC;IAClC,CAAC,MAAM,IAAIE,YAAY,KAAK,GAAG,EAAE;MAC/BhB,GAAG,CAACH,IAAI,CAAC;QAAEiB,MAAM,EAAE;MAAS,CAAC,CAAC;IAChC,CAAC,MAAM;MACLd,GAAG,CAACa,MAAM,CAAC,GAAG,CAAC,CAAChB,IAAI,CAAC;QAAEiB,MAAM,EAAE;MAA0B,CAAC,CAAC;IAC7D;EACF,CAAC,CAAC;AACJ,CAAC,CAAC;AAEFpB,GAAG,CAACwB,MAAM,CAACvB,IAAI,EAAE,MAAM;EACrBY,OAAO,CAACC,GAAG,CAAC,sCAAsCb,IAAI,EAAE,CAAC;AAC3D,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}